#!/usr/bin/python -Wall
# -*- coding: utf-8 -*-
'''
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

    Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
    Square      P4,n=n2     1, 4, 9, 16, 25, ...
    Pentagonal      P5,n=n(3n-1)/2      1, 5, 12, 22, 35, ...
    Hexagonal       P6,n=n(2n-1)        1, 6, 15, 28, 45, ...
    Heptagonal      P7,n=n(5n-3)/2      1, 7, 18, 34, 55, ...
    Octagonal       P8,n=n(3n-2)        1, 8, 21, 40, 65, ...
    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.
    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
'''            

import math

def perfect_sq(n):
    return n == int(math.sqrt(n)) ** 2

p3 = [ ]
p4 = [ ]
p5 = [ ]
p6 = [ ]
p7 = [ ]
p8 = [ ]
def P3():
    for n in range(30, 1000):
        ret = (n*(n+1))/2
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p3.append(ret)

def P4():
    for n in range(20, 1000):
        ret = n**2
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p4.append(ret)
def P5():
    for n in range(3, 1000):
        ret = (n*(3*n-1))/2
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p5.append(ret)

def P6():
    for n in range(3, 1000):
        ret = n*(2*n-1)
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p6.append(ret)

def P7():
    for n in range(3, 1000):
        ret = (n*(5*n-3))/2
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p7.append(ret)

def P8():
    for n in range(3, 1000):
        ret = n*(3*n-2)
        if ret < 10000 and ret > 999:
            buf = str(ret)
            if int(buf[2]) == 0:
                continue
            p8.append(ret)


def Init():
    P3()
    P4()
    P5()
    P6()
    P7()
    P8()

def Display():
    print "(3)  ", p3
    print "(4)  ", p4
    print "(5)  ", p5
    print "(6)  ", p6
    print "(7)  ", p7
    print "(8)  ", p8

def E61():
    Init()
#    Display()

    a = [ ]

    a.append(p3)
    a.append(p4)
    a.append(p5)
    a.append(p6)
    a.append(p7)
    a.append(p8)

    for i1 in range(0, 6):

        for i2 in range(0, 6):
            if i2 == i1:
                continue

            for i3 in range(0, 6):
                if i3 == i1 or i3 == i2:
                    continue

                for i4 in range(0, 6):
                    if i4 == i1 or i4 == i2 or i4 == i3:
                        continue

                    for i5 in range(0, 6):
                        if i5 == i1 or i5 == i2 or i5 == i3 or i5 == i4:
                            continue

                        for i6 in range(0, 6):
                            if i6 == i1 or i6 == i2 or i6 == i3 or i6 == i4 or i6 == i5:
                                continue

                            for j1 in a[i1]:
                                k1 = j1/100
                                k11 = j1%100
                                for j2 in a[i2]:
                                    k2 = j2/100
                                    if k11 != k2:
                                        continue
                                    k22 = j2%100

                                    for j3 in a[i3]:
                                        k3 = j3/100
                                        if k22 != k3:
                                            continue
                                        k33 = j3%100

                                        for j4 in a[i4]:
                                            k4 = j4/100
                                            if k33 != k4:
                                                continue
                                            k44 = j4%100

                                            for j5 in a[i5]:
                                                k5 = j5/100
                                                if k44 != k5:
                                                    continue
                                                k55 = j5%100

                                                for j6 in a[i6]:
                                                    k6 = j6/100
                                                    if k55 != k6:
                                                        continue
                                                    k66 = j6%100

                                                    if k1 == k66:
                                                        print "found--->>>   ", j1,j2,j3,j4,j5,j6,"(",i1,i2,i3,i4,i5,i6,")", j1+j2+j3+j4+j5+j6

E61()
